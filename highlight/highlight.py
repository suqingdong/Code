#!/usr/bin/env python
# -*- coding=utf-8 -*-
"""
\x1b[1;5;32m\n\t\tHighlight the HTML file generated by `samtools tview`\x1b[0m

\x1b[31mUsage:
    highlight <infile> <positions>... 
        [--outfile=<outfile>] [--color=<color>] [--background=<bg>]
        [--font-size=<fs>] [--bold=<T,F>] [--width=<width>]

\x1b[36mOptions:
    <infile>                 The input html file to highlight
    <positions>              The position(s) on chrom to highlight(can specify one or more columns)
    --outfile=<outfile>      The highlight outfile[default: out.html]
    --color=<color>          The highlight color[default: red]
    --background=<bg>        The highlight background color[default: yellow]
    --font-size=<fs>         The font size[default: 13]
    --bold=<T,F>             Whether the highlighted base is shown as bold[default: F]
    --width=<width>          The width of window[default: 80]

\x1b[1;34mContact:
    suqingdong <suqingdong@novogene.com>

"""
import re
import sys
import docopt

try:
    import colorama
except ImportError:
    sys.path.append('/ifs/TJPROJ3/DISEASE/share/Software/python/site-packages')
    import colorama


# colorama needs init before used
colorama.init()


def add_class(seq, index):

    highlight_base = "<i class='highlight'>{}</i>".format(seq[index])
    new_seq = seq[:index] + highlight_base + seq[index + 1:]

    return new_seq


def highlight_span(span, highlight_index):

    linelist = re.split(r'(<.*?>)', span)
    # print linelist

    total_len = 0
    for idx, each in enumerate(linelist):
        if not re.match(r'^<.*?>$', each):
            total_len += len(each)
            if total_len > highlight_index:
                true_index = highlight_index - (total_len - len(each))
                linelist[idx] = add_class(linelist[idx], true_index)
                # print linelist
                break

    return ''.join(linelist)


def main():

    infile = arguments.get('<infile>')
    positions = arguments.get('<positions>')
    outfile = arguments.get('--outfile')
    color = arguments.get('--color')
    background = arguments.get('--background')
    bold = arguments.get('--bold')
    fontsize = arguments.get('--font-size')
    width = int(arguments.get('--width'))

    fontweight = ['bold' if bold == 'T' else 'none'][0]
    highlight_css = '.highlight {color:%s;background:%s;font-weight:%s;font-style:normal;}\n' % (color, background, fontweight)
    highlight_css += '.tviewpre {font-size:%s}\n' % fontsize

    with open(infile) as f, open(outfile, 'w') as out:
        for line in f:
            if not line.startswith('</style>'):
                out.write(line)
                continue
            out.write(highlight_css)

            prefix = re.findall(r'(</style>.*?)<span', line)[0]
            suffix = '</pre></div></body></html>'

            spans = re.findall(r'(<span.*?)<br/>', line)

            position_line = spans[0] + '<br/>'

            first_position = re.findall(r"<div class='tviewtitle'>.*?:(\d+?)</div>", prefix)[0]         # according to the .tviewtitle

            last_span = re.findall(r'<br/>(<span[^(br)]*?</span>)</pre>', line)[-1]  # the last span has no <br/>

            # new_line == prefix + position_line + spans_line + suffix
            new_line = prefix + position_line

            for span in spans[1:] + [last_span]:
                for position in positions:
                    highlight_index = int(position) - int(first_position)
                    if highlight_index not in range(0, width):                 # validate the position
                        msg = 'Error Position: {}\nShould be in range {} ~ {}'.format(position, first_position, int(first_position) + width - 1)
                        exit(msg)
                    span = highlight_span(span, highlight_index)            # highlight one or more position for each span
                new_line += span + '<br/>'

            new_line = new_line[:-5]                                        # remove the last span's <br/>
            new_line += suffix

            out.write(new_line)
    print 'Successfully generate the highlighted file: %s' % outfile


if __name__ == "__main__":

    arguments = docopt.docopt(__doc__)
    # print arguments

    main()
